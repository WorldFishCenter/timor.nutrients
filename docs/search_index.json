[["index.html", "Modelling scenarios for nutrient-sensitive fisheries management 1 Content", " Modelling scenarios for nutrient-sensitive fisheries management Lore 2023-11-12 1 Content This book contains analyses and reports in ‘Modelling scenarios for nutrient-sensitive fisheries management’ "],["data.html", "2 Data 2.1 Catch weight and nutrional content", " 2 Data The research presented in this book relies on two primary sources of data: Recorded Catch (RC): This dataset comprises detailed records of fishing trips that were documented by data collectors in the coastal municipalities of East Timor starting from January 2018. Estimated Catch (EC): This dataset provides a broader view of catch data on a regional level. It is created by combining RC with additional information, including the frequency of fishing trips made by each fishing boat and the total number of boats surveyed (censused) in each municipality. This combination extrapolates the recorded catch data to a larger scale. 2.1 Catch weight and nutrional content The total estimated catch weight is determined by the number of individuals and the length range of each catch. Specifically, during the initial phase of the Peskas project (July 2017 - April 2019), the standard length measurement used was the fork length (FL), which later changed to the total length (TL) in the subsequent and current version of the project. We utilized the API service offered by the FishBase database to incorporate length-to-length and length-to-weight conversion tables, using information from survey landings to calculate the weight in grams based on the following formula: W = a × L^b Here, W represents the weight in grams, L is the total length (TL) in centimeters, and a and b are the conversion parameters obtained from FishBase for each fish species. The FishBase database provides length-to-length and length-to-weight relationships for over 5,000 fish species. Typically, there are multiple records for the parameters a and b for each species. Since the length measurements in Peskas’ first version pertained to FL, we initially standardized all length measurements to TL using the FishBase length-to-length conversion tables. Subsequently, we applied the TL-to-weight conversion tables to estimate the weights. The FishBase length-to-weight conversion tables offer species-level taxonomic resolution. To derive a singular length-to-weight relationship for each fish group, we calculated the median values of parameters a and b for all species within a particular fish group. To ensure relevance to the region of interest, we refined the species list using FAO country codes (https://www.fao.org/countryprofiles/iso3list/en/) pertinent to Timor-Leste and Indonesia (country codes 626 and 360, respectively). For instance, to ascertain the weight of a catch categorized under the fish group labeled ECN (representing the Echeneidae family), we first identified the species within ECN documented in Timor-Leste and Indonesia. After this, we computed the average values of the parameters a and b for the identified species, which in this case were Echeneis naucrates and Remora remora (as illustrated in the figure below). To address the scarcity of measured nutrient values for fish, which are typically limited to a few species and countries. To overcome this data limitation, MacNeil et al. developed a Bayesian hierarchical model that leverages both phylogenetic information and trait-based information to predict concentrations of seven essential nutrients: calcium, iron, omega-3 fatty acids, protein, selenium, vitamin A, and zinc for both marine and inland fish species globally (see Hicks et al. 2019). For each catch, the nutritional yield was calculated by combining the validated weight estimates for each fish group with the modelled nutrient concentrations. Specifically, we used the highest posterior predictive density values for each of the seven nutrients, which can be found in the repository (https://github.com/mamacneil/NutrientFishbase). For non-fish groups—including octopuses, squids, cockles, shrimps, crabs, and lobsters—nutritional yield information was not available in the NutrientFishbase repository models. We retrieved the necessary data for these groups from the Global food composition database, using the same methodological approach as for the fish groups to estimate their nutritional content. To represent the nutrient concentration associated with each fish group, we used the median value as a summarizing metric. ## ℹ Downloading rfish-table__20231111005820_fe395e3__.rds ✔ Saved rfish-table__20231111005820_fe395e3__.rds to rfish-table__20231111005820_fe395e3__.rds ( 159.2 K… ## Rows: 515 Columns: 13── Column specification ────────────────────────────────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (4): integragency_code, food_name, habitat, food_state ## dbl (9): food_id, ISSCAAP, protein(g), calcium(mg), iron(mg), zinc(mg), selenium(mcg), vitaminA(mcg), ... ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Warning: There were 17 warnings in `dplyr::mutate()`. ## The first warning was: ## ℹ In argument: `ic = se * qt((1 - 0.05)/2 + 0.5, n - 1)`. ## ℹ In group 5: `interagency_code = &quot;BWH&quot;`. ## Caused by warning in `qt()`: ## ! NaNs produced ## ℹ Run `dplyr::last_dplyr_warnings()` to see the 16 remaining warnings. ## `geom_line()`: Each group consists of only one observation. ## ℹ Do you need to adjust the group aesthetic? ## `geom_line()`: Each group consists of only one observation. ## ℹ Do you need to adjust the group aesthetic? ## `geom_line()`: Each group consists of only one observation. ## ℹ Do you need to adjust the group aesthetic? ## `geom_line()`: Each group consists of only one observation. ## ℹ Do you need to adjust the group aesthetic? ## `geom_line()`: Each group consists of only one observation. ## ℹ Do you need to adjust the group aesthetic? ## `geom_line()`: Each group consists of only one observation. ## ℹ Do you need to adjust the group aesthetic? ## `geom_line()`: Each group consists of only one observation. ## ℹ Do you need to adjust the group aesthetic? ## Warning: Removed 12 rows containing missing values (`geom_segment()`). ## Warning: Removed 12 rows containing missing values (`geom_segment()`). ## Removed 12 rows containing missing values (`geom_segment()`). ## Removed 12 rows containing missing values (`geom_segment()`). ## Removed 12 rows containing missing values (`geom_segment()`). ## Removed 12 rows containing missing values (`geom_segment()`). ## Removed 12 rows containing missing values (`geom_segment()`). Figure 2.1: Distribution of nutrients’ concentration for each fish group. Dots represent the median, fig.height=4, fig.width=10, message=FALSE, warning=FALSE, bars represent the 95% confidence interval. "],["highlight.html", "3 Highlight statistics 3.1 Timor-Est SSF nutritional scenario", " 3 Highlight statistics 3.1 Timor-Est SSF nutritional scenario The table uses the EC dataset and summarizes the main statistics on nutrient supply for each region. Below is a description of each table’ column: MUNICIPALITY (POPULATION): Municipality and number of people &gt; 5 years old in 2022. COASTLINE EXTENSION: Municipality coastline extension in Km. NUTRIENT: Nutrient of reference ANNUAL SUPPLY: Aggregated annual value in kg. These values represent municipal-level estimates based on the number of fishing boats recorded in the 2021 Timor-Leste boat census, average number of fishing trips per boat and average landing weight values for each fish group. ANNUAL SUPPLY PER KM: It describes the annual supply of each nutrient standardized on the coastline length, that is: \\(\\frac{Annual\\ supply\\ (kg)}{Coastline\\ extension\\ (km)}\\) N. PEOPLE SUPPLIED DAILY: It describes the number of people meeting the nutrient’ RNI for each municipality. RNI values used are the following: Selenium Zinc Protein Total -3 PUFA Calcium Iron Vitamin-A 0.000026 0.0049 46 2.939 1 0.0294 0.0005 The 20% of RNIs values was take as reference in consideration of the fact that an ‘adequate diet’ is expected to comprise 5 food group. RNIs were then converted from grams to kg (dividing by 1000) and the requirements was calculated as: \\(\\frac{Anuual\\ supply\\ (kg)}{(RNI\\times 0.20) \\ / 1000} /365\\) POPULATION MEETING RNI REQUIREMENTS: Percentage of the population meeting the RNI requirements in each municipality: \\(\\frac{Number\\ of\\ people\\ supplied\\ daily}{Municipality\\ population} \\times 100\\) "],["distribution.html", "4 Nutrients distribution 4.1 Fish groups 4.2 Habitat and gear type", " 4 Nutrients distribution This section presents the analyses that illustrates the distribution of nutrients within various components of small-scale fisheries in East Timor. 4.1 Fish groups Figure 4.1: Fish groups’ nutrional contribution to RNI. 4.2 Habitat and gear type Figure 4.2: Sankey diagram showing the relative distribution of key nutrients across various marine habitats and the corresponding extraction by different fishing gear types used in Timor-Est small-scale fisheries. "],["profiles.html", "5 Timor SSF nutrient profiles 5.1 Methods 5.2 Results", " 5 Timor SSF nutrient profiles 5.1 Methods In this section, we identified recurrent nutritional profiles based on RC data. We aimed to determine the most appropriate number of distinct groups, or “clusters,” present in our dataset. To achieve this, we used the total within sum of square (WSS) to identify the point at which grouping additional data points together does not significantly improve the clarity of the clustering. Once we established the optimal number of clusters, we applied the K-means clustering method. This is a widely-used technique that organizes data into clusters based on similarity. In our case, we grouped fishing trips together if they showed similar levels of nutrient concentrations. By doing this, we were able to observe patterns and categorize the trips according to their nutritional profiles. Then we performed a ML model to assess whether nutritional profiles were predicatable by fishing strategy. We utilized a machine learning approach, specifically employing the XGBoost algorithm. XGBoost was chosen due to its capability in handling categorical variables, such as habitat, gear type, and vessel type, which are prominent in our dataset. Additionally, its proficiency in handling categorical variables and enabling a detailed examination of predictor importance in relation to the nutritional profiles classification aligned well with our requirement to model the clusters as a categorical outcome variable. The selection of XGBoost was also influenced by its inherent mechanisms that mitigate overfitting, an important consideration to enhance the reliability of our predictive model. The algorithm’s feature importance functionality provided an added benefit, allowing for an examination of which predictors exert the most influence on the nutritional profile clusters. This aspect was pertinent to our objective of exploring the association between fishing strategies and nutritional outcomes. 5.2 Results 5.2.1 Clusters library(ggplot2) df &lt;- timor.nutrients::kobo_trips %&gt;% dplyr::ungroup() %&gt;% dplyr::select(-Selenium_mu) %&gt;% rename_nutrients_mu() %&gt;% tidyr::pivot_longer(c(zinc:vitaminA), names_to = &quot;nutrient&quot;, values_to = &quot;kg&quot;) %&gt;% dplyr::left_join(RDI_tab, by = &quot;nutrient&quot;) %&gt;% dplyr::mutate( nutrients_kg_per_kg = kg / weight, # standardize nutrients for 1 kg of catch nutrients_g_per_kg = nutrients_kg_per_kg * 1000, # convert stand nutrients in grams people_rni_kg = nutrients_g_per_kg / conv_factor ) %&gt;% dplyr::select(landing_id, reporting_region, landing_date, vessel_type, habitat, gear_type, nutrient, people_rni_kg) %&gt;% tidyr::pivot_wider(names_from = &quot;nutrient&quot;, values_from = &quot;people_rni_kg&quot;) %&gt;% dplyr::mutate(quarter = lubridate::quarter(landing_date)) %&gt;% dplyr::select(landing_date, quarter, dplyr::everything()) %&gt;% # dplyr::filter(landing_period &gt; &quot;2019-01-01&quot;) %&gt;% dplyr::group_by(landing_date, quarter, vessel_type, habitat, gear_type) %&gt;% dplyr::summarise(dplyr::across(is.numeric, ~ median(.x, na.rm = T))) %&gt;% dplyr::ungroup() %&gt;% na.omit() # factoextra::fviz_nbclust(df[ ,5:10], kmeans, method = &quot;wss&quot;) set.seed(555) k2 &lt;- kmeans(df[, 6:11], centers = 5, nstart = 500) factoextra::fviz_cluster(k2, data = df[, 6:11], geom = c(&quot;point&quot;), shape = 19 ) + theme_minimal() + scale_fill_viridis_d() + scale_color_viridis_d() + labs(title = &quot;&quot;) + theme(legend.position = &quot;bottom&quot;) Figure 5.1: Cluster analysis of nutrient profiles using k-means clustering. The scatter plot visualizes the distribution of data points in a two-dimensional space defined by the first two principal components which explain 39% and 26% of the variance. The convex hulls represent the boundaries of each cluster, providing a visual guide to the cluster density and separation. clusterdf &lt;- dplyr::tibble( clusters = as.character(k2$cluster), df ) clusterdf %&gt;% # dplyr::select(-weight) %&gt;% tidyr::pivot_longer(c(zinc:vitaminA)) %&gt;% dplyr::group_by(clusters, name) %&gt;% dplyr::summarise(value = median(value, na.rm = T)) %&gt;% ggplot(aes(value, reorder(clusters, value), fill = name)) + theme_minimal() + geom_col() + scale_fill_viridis_d() + coord_cartesian(expand = FALSE) + theme(legend.position = &quot;bottom&quot;) + labs(x = &quot;N. individuals meeting RNI per 1kg of catch&quot;, y = &quot;Cluster number&quot;, fill = &quot;&quot;) Figure 5.2: Distribution of nutrient adequacy across k-means clusters. The bar chart represents the number of individuals meeting the Recommended Nutrient Intake (RNI) per 1kg of catch for each nutrient within different clusters. Each bar is segmented into six categories corresponding to the nutrients analyzed: calcium (dark purple), iron (blue), omega-3 (green), protein (teal), vitamin A (dark teal), and zinc (yellow). Clusters are labeled on the y-axis, indicating distinct groupings based on nutrient profile similarities derived from the cluster analysis. The x-axis quantifies the number of individuals who meet the RNI, highlighting the variation in nutritional fulfillment across clusters. # generate data for ML model clusterdf %&gt;% dplyr::mutate(habitat_gear = paste(habitat, gear_type, sep = &quot;_&quot;)) %&gt;% dplyr::select(quarter, habitat_gear, habitat, gear_type, vessel_type, cluster = clusters) %&gt;% readr::write_rds(file = paste0(system.file(&quot;model-outputs&quot;, package = &quot;timor.nutrients&quot;), &quot;/ml_data.rds&quot;)) 5.2.2 XGBoost model df_field &lt;- readr::read_rds(paste0(system.file(&quot;model-outputs&quot;, package = &quot;timor.nutrients&quot;), &quot;/ml_data.rds&quot;)) %&gt;% dplyr::mutate_all(as.factor) # DataExplorer::plot_intro(df) # DataExplorer::plot_bar(df) # splitting and resampling set.seed(234) df_split &lt;- df_field %&gt;% rsample::initial_split(prop = 0.8, strata = cluster) train &lt;- rsample::training(df_split) test &lt;- rsample::testing(df_split) # Cross validation folds from training dataset set.seed(567) folds &lt;- rsample::vfold_cv(train, strata = cluster) # pre- processing cust_rec &lt;- recipes::recipe(cluster ~ ., data = train) %&gt;% # update_role(customerID, new_role = &quot;ID&quot;) %&gt;% # step_corr(all_numeric()) %&gt;% recipes::step_corr(recipes::all_numeric(), threshold = 0.7, method = &quot;spearman&quot;) %&gt;% recipes::step_zv(recipes::all_numeric()) %&gt;% # filter zero variance # recipes::step_normalize(recipes::all_numeric()) %&gt;% recipes::step_integer(recipes::all_nominal()) # define model xgb_spec &lt;- parsnip::boost_tree( trees = 500, tree_depth = hardhat::tune(), min_n = hardhat::tune(), loss_reduction = hardhat::tune(), ## first three: model complexity sample_size = hardhat::tune(), mtry = hardhat::tune(), ## randomness learn_rate = hardhat::tune() ## step size ) %&gt;% parsnip::set_engine(&quot;xgboost&quot;) %&gt;% parsnip::set_mode(&quot;classification&quot;) # Passing to workflow formula and Model specification xgb_wf &lt;- workflows::workflow() %&gt;% workflows::add_formula(cluster ~ .) %&gt;% workflows::add_model(xgb_spec) # tuning xgb_grid &lt;- dials::grid_latin_hypercube( dials::tree_depth(), dials::min_n(), dials::loss_reduction(), sample_size = sample_prop(), dials::finalize(dials::mtry(), train), dials::learn_rate(), size = 20 ) doParallel::registerDoParallel(cores = 6) set.seed(891) xgb_res &lt;- tune::tune_grid( xgb_wf, resamples = folds, grid = xgb_grid, control = tune::control_grid(save_pred = TRUE) ) #readr::write_rds(xgb_res, file = paste0(system.file(&quot;model-outputs&quot;, package = &quot;timor.nutrients&quot;), &quot;/xgb_res.rds&quot;)) # dysplay tuning parameters # xgb_res %&gt;% # tune::collect_metrics() %&gt;% # dplyr::filter(.metric == &quot;roc_auc&quot;) %&gt;% # dplyr::select(mean, mtry:sample_size) %&gt;% # tidyr::pivot_longer(mtry:sample_size, # names_to = &quot;parameter&quot;, # values_to = &quot;value&quot; # ) %&gt;% # ggplot(aes(value, mean, color = parameter)) + # geom_point(show.legend = FALSE) + # facet_wrap(~parameter, scales = &quot;free_x&quot;) # tune::show_best(xgb_res, &quot;roc_auc&quot;) # select best tune xgb_res &lt;- readr::read_rds(paste0(system.file(&quot;model-outputs&quot;, package = &quot;timor.nutrients&quot;), &quot;/xgb_res.rds&quot;)) best_auc &lt;- tune::select_best(xgb_res, &quot;roc_auc&quot;) final_xgb &lt;- tune::finalize_workflow(xgb_wf, best_auc) # final_xgb %&gt;% # fit(data = train) %&gt;% # hardhat::extract_fit_parsnip() %&gt;% # vip::vip(geom = &quot;point&quot;) # fit final_rs &lt;- tune::last_fit(final_xgb, df_split, metrics = yardstick::metric_set(accuracy, roc_auc, sens, spec) ) # final_rs %&gt;% # tune::collect_metrics() cmat &lt;- final_rs %&gt;% tune::collect_predictions() %&gt;% yardstick::conf_mat(cluster, .pred_class) # show roc curves final_rs %&gt;% tune::collect_predictions() %&gt;% yardstick::roc_curve(cluster, c(.pred_1:.pred_5), event_level = &quot;second&quot;) %&gt;% ggplot(aes(1 - specificity, sensitivity, color = .level)) + theme_minimal() + geom_line() + # geom_point()+ scale_color_viridis_d() + labs(color = &quot;cluster&quot;) # show auc value final_rs %&gt;% tune::collect_predictions() %&gt;% yardstick::roc_auc(cluster, c(.pred_1:.pred_5)) %&gt;% janitor::clean_names() %&gt;% dplyr::mutate(estimate = round(estimate, 2)) %&gt;% knitr::kable() metric estimator estimate roc_auc hand_till 0.86 "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
